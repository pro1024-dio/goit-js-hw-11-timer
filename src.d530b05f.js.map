{"version":3,"sources":["index.js"],"names":["CountdownTimer","constructor","selector","targetDate","timeLimitWarn","intervalId","refsClock","days","document","querySelector","hours","mins","secs","console","log","init","start","setInterval","timeDiff","timeDifference","updateClockface","getComponentsClock","stop","Date","now","clearInterval","time","Math","floor","activeLimitWarn","d","h","m","s","style","color","textContent","pad","value","String","padStart","max","length","countdownTimer"],"mappings":";;;AAoHA,aApHA,QAAA,kBAIA,MAAMA,EAEFC,aAAY,SAAEC,EAAF,WAAYC,EAAZ,cAAwBC,EAAgB,OAC3CC,KAAAA,WAAa,KACbH,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,cAAgBA,EAEhBE,KAAAA,UAAY,CACbC,KAAMC,SAASC,iBAAiB,KAAKP,oCACrCQ,MAAOF,SAASC,iBAAiB,KAAKP,qCACtCS,KAAMH,SAASC,iBAAiB,KAAKP,oCACrCU,KAAMJ,SAASC,iBAAiB,KAAKP,qCAEzCW,QAAQC,IAAI,4BAEPC,KAAAA,OAGTC,QACS,KAAKX,aACDA,KAAAA,WAAaY,YAAY,KACpBC,MAAAA,EAAW,KAAKC,iBAClBD,EAAW,EACNE,KAAAA,gBAAgB,KAAKC,mBAAmBH,IAExCI,KAAAA,QAEV,MAMXH,iBACW,OAAA,KAAKhB,WAAaoB,KAAKC,MAGlCF,OACIG,cAAc,KAAKpB,YACdA,KAAAA,WAAa,KAGtBU,OACQ,KAAKI,kBAAoB,EAEpBC,KAAAA,gBAAgB,KAAKC,mBAAmB,IAExCL,KAAAA,QAIbK,mBAAmBK,GA0BR,MAAA,CAACnB,KArBKoB,KAAKC,MAAMF,EAAQ,OAqBlBhB,MAdAiB,KAAKC,MAAOF,EAAQ,MAAyB,MActCf,KARRgB,KAAKC,MAAOF,EAAQ,KAAoB,KAQ1Bd,KAFde,KAAKC,MAAOF,EAAQ,IAAc,MAKnDN,iBAAgB,KAAEb,EAAF,MAAQG,EAAR,KAAeC,EAAf,KAAqBC,IAC7BiB,IAAAA,GAAkB,EAClB,KAAKzB,gBACLyB,GAAkB,EACdtB,EAAO,KAAKH,cAAc0B,EAC1BD,GAAkB,EACbtB,IAAS,KAAKH,cAAc0B,GAAKpB,EAAQ,KAAKN,cAAc2B,EACjEF,GAAkB,EACbnB,IAAU,KAAKN,cAAc2B,GAAKpB,EAAO,KAAKP,cAAc4B,EACrEH,GAAkB,EACVlB,IAAS,KAAKP,cAAc4B,GAAKpB,EAAO,KAAKR,cAAc6B,IAC/DJ,GAAkB,IAKtBA,IAAiBrB,SAASC,iBAAiB,KAAKP,YAAYgC,MAAMC,MAAQ,OACzE7B,KAAAA,UAAUC,KAAK6B,YAAc,KAAKC,IAAI9B,GACtCD,KAAAA,UAAUI,MAAM0B,YAAc,KAAKC,IAAI3B,GACvCJ,KAAAA,UAAUK,KAAKyB,YAAc,KAAKC,IAAI1B,GACtCL,KAAAA,UAAUM,KAAKwB,YAAc,KAAKC,IAAIzB,GAG/CyB,IAAIC,GACOC,OAAAA,OAAOD,GAAOE,SAASb,KAAKc,IAAI,EAAGF,OAAOD,GAAOI,QAAS,MAOzE,MAAMC,EAAiB,IAAI3C,EAAe,CACtCE,SAAU,WACVC,WAAY,IAAIoB,KAAK,gBACrBnB,cAAe,CACX0B,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG","file":"src.d530b05f.js","sourceRoot":"..\\src","sourcesContent":["import './css/main.css';\r\n\r\n\r\n\r\nclass CountdownTimer {\r\n\r\n    constructor({ selector, targetDate, timeLimitWarn = null }) {\r\n        this.intervalId = null;\r\n        this.selector = selector;\r\n        this.targetDate = targetDate;\r\n        this.timeLimitWarn = timeLimitWarn;\r\n\r\n        this.refsClock = {\r\n            days: document.querySelector(`${this.selector} span[data-value=\"days\"]`),\r\n            hours: document.querySelector(`${this.selector} span[data-value=\"hours\"]`),\r\n            mins: document.querySelector(`${this.selector} span[data-value=\"mins\"]`),\r\n            secs: document.querySelector(`${this.selector} span[data-value=\"secs\"]`),\r\n        };\r\n        console.log('craete class constructor');\r\n\r\n        this.init();\r\n    }\r\n\r\n    start() {\r\n        if (!this.intervalId) {\r\n            this.intervalId = setInterval(() => {\r\n                const timeDiff = this.timeDifference();\r\n                if (timeDiff > 0) {\r\n                    this.updateClockface(this.getComponentsClock(timeDiff));\r\n                } else {\r\n                    this.stop();\r\n                }\r\n            }, 1000);\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    timeDifference() {\r\n        return this.targetDate - Date.now();;\r\n    }\r\n\r\n    stop() {\r\n        clearInterval(this.intervalId);\r\n        this.intervalId = null;\r\n    }\r\n\r\n    init() {\r\n        if (this.timeDifference() <= 0) {\r\n            \r\n            this.updateClockface(this.getComponentsClock(0));\r\n        } else {\r\n            this.start();\r\n        }\r\n    };\r\n\r\n    getComponentsClock(time) {\r\n        /*\r\n        * Дні, що залишилися: ділимо значення UTC на 1000 * 60 * 60 * 24, кількість\r\n        * мілісекунд в один день (мілісекунди * секунди * хвилини * години)\r\n        */\r\n        const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n\r\n        /*\r\n        * Решта годин: отримуємо залишок від попереднього розрахунку за допомогою оператора\r\n        * залишку% і ділимо його на кількість мілісекунд в одній годині\r\n        * (1000 * 60 * 60 = мілісекунди * хвилини * секунди)\r\n        */\r\n        const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n\r\n        /*\r\n        * Решта хвилин: отримуємо хвилини, що залишилися і ділимо їх на кількість\r\n        * мілісекунд в одній хвилині (1000 * 60 = мілісекунди * секунди)\r\n        */\r\n        const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n        /*\r\n        * Решта секунд: отримуємо секунди, які залишилися і ділимо їх на кількість\r\n        * миллисекунд в одной секунде (1000)\r\n        */\r\n        const secs = Math.floor((time % (1000 * 60)) / 1000);\r\n\r\n        return {days, hours, mins, secs};\r\n    };\r\n\r\n    updateClockface({ days, hours, mins, secs }) {\r\n        let activeLimitWarn = false;\r\n        if (this.timeLimitWarn) {\r\n            activeLimitWarn = true;\r\n            if (days > this.timeLimitWarn.d)\r\n                activeLimitWarn = false;\r\n            else if (days === this.timeLimitWarn.d && hours > this.timeLimitWarn.h)\r\n                activeLimitWarn = false;\r\n            else if (hours === this.timeLimitWarn.h && mins > this.timeLimitWarn.m)\r\n            activeLimitWarn = false;\r\n            else if(mins === this.timeLimitWarn.m && secs > this.timeLimitWarn.s)\r\n                activeLimitWarn = false;\r\n            // && hours <= this.timeLimitWarn.h && mins <= this.timeLimitWarn.m && secs <= this.timeLimitWarn.s) {\r\n            // document.querySelector(`${this.selector}`).style.color = 'red';\r\n        }\r\n\r\n        if (activeLimitWarn) document.querySelector(`${this.selector}`).style.color = 'red';\r\n        this.refsClock.days.textContent = this.pad(days);\r\n        this.refsClock.hours.textContent = this.pad(hours);\r\n        this.refsClock.mins.textContent = this.pad(mins);\r\n        this.refsClock.secs.textContent = this.pad(secs);\r\n    }\r\n    \r\n    pad(value) {\r\n        return String(value).padStart(Math.max(2, String(value).length), '0');\r\n    }\r\n\r\n};\r\n\r\n\r\n\r\nconst countdownTimer = new CountdownTimer({\r\n    selector: '#timer-1',\r\n    targetDate: new Date('Nov 17, 2021'),\r\n    timeLimitWarn: {\r\n        d: 2,\r\n        h: 0,\r\n        m: 0,\r\n        s: 0,\r\n    },\r\n});"]}